# 15.12.2022 - функции
''' ЭПИЛОГ
По факту функций могут быть 3:
    1) Обычные функции
    2) Функции с return
    3) Функция lambda
(1) - выполняет некоторые действия, например, выводят на экран что-то в определенном виде, выводит действие
(2) - выполняет некоторые действия, например, выводят на экран результат (число, символ)
(3) - выполняет некоторые действия, в отличие от двух этих функций, оно записывается построчно, позволяет работать, когда нужно краткросрочное(не большое действие) что-то сделать, не применяя большие функции
'''

''' (1)
Как создать функцию и использовать её

def draw_fig(): # Создается функция и её название
    for i in range(5):
        print('0'*5)
    print('------------')
#Чтобы ее использовать обязательно её нужнр выводить за функцию
draw_fig() #Вызвали функцию ПО ИМЕНИИ
'''

'''                              Минутка объяснении
почему вызываем по имени, а не print
Дело в том, что команда print - это на самом деле функция, т.е. кто-то ее сделал, а мы ею пользуемся, и
каждый раз её ВЫЗЫВАЕМ.
Точно также работает со СВОИМИ функциями, мы их должны вызывать по ИМЕНИ, можно по миллиону раз ее вызывать
-----------------------------------------------
Далее, мы можем задавать параметры нашей функции, это сделать совсем просто
В кргулых скобках задаем переменные, далее её нужно будет упоминать,т.е. записывать значения(аргументы)
'''

#Пример
'''
def draw_fig(x,y): # Создали два параметра(переменных), которые будут за что-то отвечать (Для нашего удобства x - высота, y - ширина) 
    for i in range(x): #Здесь мы создаем ее высоту
        print('0'*y)   #Здесь мы создаем ее ширину
    print('------------')
#Чтобы ее использовать обязательно её нужнр выводить за функцию
draw_fig(2,3) #Обязательно нужно применить АРГУМЕНТЫ! #т.е. 2 - высота, 3 - ширина
'''

#Задачи
'''
Написать функцию, которая принимает стороны прямоугольника и выводит периметр и площадь
'''
'''
def znachenia(a,b):
    s = a*b
    p = 2*(a+b)
    print(s,p)
znachenia(2,5)
'''

'''
Написать функцию,которая принимает целое число минут и преобразует его в сек и выводит на экран

def f(x):
    c = x * 60
    print(c)
f(5)
'''

'''
Создать функцию, принимающую на входе два числа и печатающую на экране сумму этих чисел

def f(x,y):
    print(x+y)
f(15,2)
#
def numbers(a,b):
    print(a+b)
numbers(int(input('ЧИСЛО 1 ')), int(input('ЧИСЛО 2 ')))
'''

'''
Создать функцию, которая принимает два аргумента - исходная цена и скидка
в виде целых чисел. И выводит на экран цену после применения скидки.


def product(price, discount):
    price_with_discount = price - ((discount * price) / 100) # цена со скидкой
    print('со скидкой эта вещь стоит',price_with_discount)
product(int(input('введи цену ')),int(input('введи скидку в процентах ')))
#тут работает в первом аргументе значение PRICE, второй аргумент значение DISCOUNT
'''

'''
Создайте функцию, принимающую на вход список целых чисел и выводящую на экран среднее арифметическое число
'''
##
##def srd(x):
##    for i in range(len(x)):
##        

'''
Создать функцию, принимающую число и выводящую на экран длину этого числа(len использовать нельзя)

def dlina(x):
    c = 0
    for i in x:
        c+=1
    print(c)
dlina(input('введи число '))
#ИЛИИ от учителя
def dlinna(x):
    l = 0
    while x > 0 :
        x = x// 10
        l = l + 1
    print(l,'значное')
dlinna(int(input('Введи число ')))
'''
'''
Создать функцию, которая берет
'''

##------------------------------------------------------------------------------------------
# 18.12.2022 - Продолжение понятия функций (return, lambda)

#глобальная переменная - переменная, созданная вне функции и доступная во всей программе
'''
z = 100
def fun():
    global z # команда, которая применять эту переменную и исправляет её
    z = z + 50
    print(z)
fun()
print()
print(z)
'''

#локальеык переменные - переменная, которая создана в функции и доступна только в ней!
'''
def fun2():
    y = 100 # локальная переменная, изменяется только в функции
    print(y)
fun2()
print(y) # Ошибка, потому что локальная переменная Y доступна только внутри функции
'''

#глобальные и локальные переменные с одинаковыми именами
#Надо сказать, что эти две переменные не зависят друг от друга, так как это две различные переменные, несмотря даже, что с одинаковыми именами!
'''
x = 10 # глобал
def func():
    x = 20 # локал
    print(x)
func() #выведит благодаря принту ЛОКАЛЬНУЮ переменную
print(x) # В приоритете будет ГЛОБАЛЬНАЯ переменная
'''

#                (2)     оператор return для функции
# return - возвращает значение, позволяет нам использовать его как переменную
# return - завершает функцию , после неё писать нельзя (бессмыслено)
'''
def summa(x,y):
    z = x + y
    return z

money = 50 # В начале у нас 50 монет

# наш игрок заработал еще 200 монет
money = summa(money,200) # money - это аргумент X, 50 - аргумент Y  
##^- позволило сохранить в эту переменную значение 250, благодаря return

print(money)

# Еще заработал 50 монет
money = summa(money, 50)
##^- позволило сохранить в эту переменную значение 250, благодаря return

print(money)
'''



'''Если сделать сравнительную аналогию, то можно поначалу увидеть, что функции работают также, но с различиями:
    1) В первом примере НУЖНО применять print
      1.1) Позволяет нам работать в дальнейшем, если к примеру, у человека появится еще 50 монет, то он с сохранившегося значения добавит новое значение
      1.2) Позволяет сохранять переменную в return 
    2) Вовтором примере НЕ нужно применять print, так как просто вызываем функцию
      2.1) Не позволяет нам работать в дальнейшем, если к примеру, у человека появились еще 50 монет, выдаст ошибку
      2.2.) ------

def summa(x,y):
    z = x + y
    return z
# В начале у нас 50 монет
money = 50
money = summa(money,200) # money - это аргумент X, 50 - аргумент Y
print(money)
money = summa(money,50)
print(money)

def summa(x,y):
    z = x + y
    print(z)
money = 50
money = summa(money,200)
money = summa(money,50)
'''

'''
#В функции в return можно выводить несколько значений, но тогда будет выводить значения в КОРТЕЖЕ (смотреть ниже)
def calc(x,y):
    summa = x + y
    rez = x - y
    return summa,rez
print(calc(10,20)) ##Выведит кортеж

a,b = calc(10,20) #Добавили соответственно в эти переменные уже готовые значения, которые были переработаны в функции
print(a) #Вывод 10
print(b) #Вывод 20
'''

'''
# Также return может выводить строки(смотреть ниже)
def pogoda(weather):
    if weather == 'холодно':
        return 'Надень шапку'
    elif weather == 'тепло' :
        return 'Не надевай шапку No'

x = input('Какая сейчас погода? Холодно или тепло?')
print(pogoda(x))
'''
# Задачка
'''
НАписать программу, которая принимает от пользователя ГОД и возвращает высокосный год или нет
Высокосный год - год, который кратен 4, но не кратен 100 или кратен 400

def god(x):
    if (x % 4 == 0 and x % 100 != 0) or x % 400 == 0:
        return "Высокосный год"
    else:
        return "Невысокосный год"
x = int(input('Введи год '))
print(god(x))
'''

'''
Создать функцию, которая берет словарь объектов {'name': 'Sam','Grade':[3,5,4]}
и возвращает словарь таких объектов, как {'name':'Sam', 'top_grade': 5}

sometging_dict = {'name': 'Sam','grade':[3,5,4]}
def do_top_grade(dict): #Здесь dict - это параметр, переменная, а не словарь!
    last_elem = dict.pop('grade')
    print(f"Значние от удаленного ключа {last_elem}")
    max_elem = max(last_elem)
    print(f"МАКС в значение от удаленного ключа {max_elem}")

    dict['top_grade'] = max_elem #Присваивается к новому ключю значение!
    print(dict)
    
do_top_grade(sometging_dict)
'''
'''
Создать функцию, которая принимает в качестве аргумента список, состоящий из чисел
верните список, в котором будут удалены все нечетные числа.
пример [1,2,42,51]
возвращаемое значение [2,42]

a = [1,2,42,23]
new_list = []
def f():
    for i in range(len(a)):
        if a[i] % 2 == 0:
            return new_list.append(a[i])
f()
print(new_list)
'''


#                      (3)   Лямбда 
## лямбда  - такая функция, которая позваляет писать в одну строку
# не нужно писать def
# не нужно писать return
#пока так (читать конспект)
'''
def summa(x,y):
    return x+y

print(summa(10,20))

# lambda - в одну строчку
summa = lambda x,y:x+y
print(summa(10,20))
'''

