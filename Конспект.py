
'''
x = int(input())
print(x  % 10)
print((x // 10) % 10)
print((x // 100) % 10)
print(x // 1000)
'''

'''
print('Введите любое число:')
x = int(input())
a = x // 60
b = x  % 60
print(a , b)
'''

'''
x = 14
print('Точно останется для черепашек', x // 4,'останется лишним', x % 4)
'''
'''
print('Введите лбое число')
x = int(input())
if x % 2 == 0:
    print('Ваше число четное')
else:
    print('No')
'''
#===========================================================================
#07.12.2022 Циклы for
''' #статья
for i in range(5): # в переменную i сохраняем числа от 0 до 5
    print(i)        #при этом от 0 до 5, 5 не включително
for i in range(1,10):
    print('Я бегу', i, 'круг')
for i in range(1,10,2): #третья переменная отвечает за шаг
    print(i)
for i in range(10,0,-1): # начинаем с 10 до 0, 0 не включительно
    print(i)             #с шагом -1 
'''
'''
for i in range(2):
    for j in range(2):
        print('i',i)
        print('j',j)
'''
'''
##Айдишники
#в строках, как и в списках существуют ID, которые начинаются с 0 и до какого-то символа
#К примеру, КОЛБАСА, его ID по символам > К = 0. О = 1. Л = 3. Б = 4. А = 5. С = 6. А = 7
#К символу можно обращаться с конца, при этом он всегда будет обрашатсья с конца,
#т.е. [-1] обращаяется к последнему,в нашем случае это будет А, [-2] = С, предпоследний символ
word = 'Колбаса'
for i in range(7):
    print(word[i])
'''

'''
##break and len
break - нужен для завершения цикла
len -  нужен для подсчитывания кол-ва символов
'''

'''
#for - счетный цикл
#while - условный цикл, проверяет условие и 1 раз выполняет программу, а затем снова проверяет
#условие и если оно верно, то снова выполняет программу и так до тех пор пока условие будет выполняться
t_password = '123'
u_password = input('Введи пароль')
while u_password != t_password:
    print('Пароль не верный')
    u_password = input('Введи пароль снова')
else:
    print('Молодца')
'''
#задачки
'''
Спросить у пользователя 5 чисел, Вывести сумму всех чисел на экран.
'''
'''
summa = 0
for i in range(5):
    n = int(input('Введите число:'))
    summa = summa + n
print(summa)
'''

'''
Дать пользователю 3 попытки на ввод пароля. При правильном вводе пишем "Верно".
'''
'''
#Бесмысленная фигня ниже
print('Придумайте пароль: ')
parol = input()
print('Введите свой пароль: ')
parol1 = input()
for i in range(0,1):
    if parol == parol1:
        print('Верно!')
        break
    else :
        print('У вас две попытки! Введите пароль заново!')
    a = input()
    if parol == a:
        print('Верно!')
        break
    else :
        print(print('У вас ОДНА попытка! Введите пароль заново!'))
    b = input()
    if parol == b:
        print('Верно!')
        break
    else :
        print('Увы, желаете поменять пароль?')
'''
'''
 Лучше так было сделать
t_pawword = 123
for i in range(3):
    u_password = int(input('Введите пароль'))
    if t_pawword == u_password:
        print('Верный пароль')
        break #завершает цикл
    else:
        print('Неверный')
'''
'''
Доп задача.
Спросить у пользователя 3 числа, вывести на экран ДА, если числа положиельные.
'''
'''
print('Введите число')
for i in range(3):
    n = int(input())
    if n > 0:
        print("ДА")
    else:
        print('число < 0')
'''
'''
доп. задача
Вывевсти нан экран каждую вторую букву слова мсье колбаскин
'''
'''
word = 'Мсье колбаскин'
#a = len(word)
for i in range(0,len(word),2):
    print(word[i])
'''
'''
Доп.задача
Вывести буквы наоборот, наизнанку
'''
'''
word = 'Мсье колбаскин'

for i in range(len(word)-1,-1,-1): ##от длины слова -1, до -1 буквы(чтобы 0 букву не потерять),
    print(word[i])                 #делаем щаг -1
#range(len(word)-1,-1,-1) , len выводит длину слова, но индексация начинается с 0, поэтому len(a) - 1
'''
'''
Доп.задача
Доработать программу старта обратного отчета взлета ракеты. Добавить возможность аварийной
остановки взлета(т.е. инпут и брейк)
'''
##for i in range(10,0,-1):
##    print(i)
##    print('Выхотите остановить отсчет?')
##    a = input()
##    if a == 'да':
##        print('СТОП')
##    break

'''
Доп. задачка
Написать цикл, в котором будут запрашиваться числа до тех пор,
пока сумма чисел меньше 500 или пока пользователь не введет число 200
'''
'''
s =  0
while s < 500 :
    n = int(input("Введите число "))
    s +=n
    if s == 200:
        break
print(s)
'''

#--------------------------------------------------------------------------------------------------------------------------
#08.12.2022
#Строки
'''
#Можно выводить посимвольно
w = 'Колбаса'
for i in range(len(w)):
    print(w[i])
    
for i in w:
    print(i)
'''
#В строках можно проверять принадлежность в строке
#К примеру надо зарегаться, но нельзя писать слово admin в любой форме!
'''
n = input('Введи ник')
if 'admin' in n.lower():
    print('No')
else :
    print('Yes')
'''
#Как можно красиво оформлять выводы !
'''
name = input()
sec = input()
x = int(input())
print(f"Привет твое имя {name}, твоя фамилия {sec}, тебе {x} лет")
# f"" -  форматирование вывода ! В фигурных скобках можно добавлять переменные
'''
############################            СРЕЗЫ
#Срезы! Выделять какие-нибудь слова ! Индексы
#Пробелы ОНИ ТОЖЕ СИМВОЛЫ! У НИХ ТОЖЕ ЕСТЬ АЙДИШНИКИ!
'''
word = 'Колбаса хлеб сыр'
print(word[0:9]) # 4 индекс не включается! 
print(word[8 : 12]) # Невключается последний индекс!
print(word[0:10:2]) # С 0 до 10 не вкл, с шагом 2
print(word[0:15:7])
print(word[::-1]) # Разворачивает слово!
'''
############################            МЕТОДЫ
'''
###Перевод первой буквы в заглавную - capitalize, создает новую строку
word = 'hello word' # Переменные - объект
w = word.capitalize() # Перезаписывает в другой объект
print(word.capitalize())
print(w)
### .title() - Меняет каждую ПЕРВУЮ букву в ЗАГЛАВНУЮ букву - title, создает новую строку 
word = 'никита романов'
word = 'НИКИТА РОМАНОВ' #т.к. есть только первые буквы, которые заглавные(>сохранит), остальные заменит на маленькие
print(word.title())

### .swapcase() - Менять регистр, делает с точностью до наоборот - swapcase, создает новую строку
word = 'hellO wOrLd'
print(word.swapcase())

### .lower() - Меняет заглавные буквы на маленькие буквы!
word = 'ADMIN'
print(word.lower())
### .upper() - Меняет маленькие буквы на ЗАГЛАВНЫЕ букву!
word = 'hello world'
print(word.upper())

### .count() - Метод, который считает в строке определенная буква. Осторожно, он чувствителен к регистру!
word = 'Sobaka'
print(word.count('a')) #таких две буквы

### .startswith - Метод, который проверяет начинается ли с определенной строки или символа! если да, то TRUE, иначе FALSE
word = 'Колбаса и хлеб'
print(word.startswith('колбаса'))#Осторожно, он чувствителен к регистру!
### .endswith()  - Метод, который проверяет совпадения конца с определенной строки или символа! если да, то TRUE, иначе FALSE
word = 'эскимо в холодильнике' #именно последнее слово или строку
print(word.endswith('о'))

### .find() - Метод, который ищет ID адрес БУКВЫ(СИМВОЛА!)в строке в НАЧАЛЕ
### .rfind() - Метод, который ищщеи ID адрес символа в строке с КОНЦА
word = 'hello world'
print(word.find('o')) # но если несколько буквы, то этими способами не получится!
print(word.rfind('o'))

### .strip() - метод, который удаляет ПРОБЕЛЫ в НАЧАЛЕ и в КОНЦЕ
### .lstrip() - метод, который удаляет в НАЧАЛЕ строки
### .rstrip() - метод, который удаляет в КОНЦЕ строки
word = ' @yandex.ru '
print(word.strip())

### .replace(a,b,c) - метод, который заменяет вместо 'а' на 'b', c - ограничивает кол-во ЗАМЕН 
word = 'ho'
print(word.replace('o', 'oooo', 1))

### .join() - метод, который соединяет строки из списка с раздилителем s/

### .isdigit() - метод, который проверяет, что строка состоит из ЦИФР! Возвращает TRUE/FAlSE
word = '123asd'
print(word.isdigit())
print(word[0].isdigit())
### .isalpha() - метод, который проверяет, что строка состоит ли из БУКВ! Возвращает TRUE/FALSE
### .isalnum() - метод, который проверяет, что строка состоит ли из ЦИФР и БУКВЫ! Возвращает TRUE/FALSE


'''
#Задачки
'''
Доп. задачки
Добавить цикл, чтобы были 3 попытки, но если ввели верный логин без слова Admin, завершаем цикл
'''
'''
for i in range(3):
    n = input('Введи ник')
    if 'admin' in n:
        print('No')
    else:
        print('Yes')
        break
'''

'''
Написать программу, которая будет определять, является ли слово палиндромом!
'''
'''
s = input('Введи слово')
if s == s[::-1]:
    print('Слово является палиндромом')
else:
    print('Слово не является палиндромом')
'''

'''
Написать программу, которая будет спрашивать у пользователя строку и подстроку
и проверять есть эта подстрока в строке или нет
'''
'''
s = input('Напишите слово ')
n = input('Проверка слова через подстроку ')
if n in s :
    print('Да')
else:
    print('No')
'''

'''
Спросить у пользователя "НА улице холодно?", если он ответит 'да','ДА','Да','дА'
программа должна верно понять его и посоветовать ему одется потеплее(не использовать and и or)
'''
'''
print('На улице холодно?')
s = input()
if s in s.lower():
    print('ок')
else:
    print('неок')
'''

'''
Дана строка с оценками ocenki = '523534235552', вывести на экран количество пятерок
'''
'''
s = '65555556546464345363334345643'
print(s.count('5'))
'''

'''
Запросить у пользователя логин. Проверить, что он соответствует следующим требованиям.
 1)Заканчивается на цифру
 2)В логине есть хотя бы один символ нижнее подчеркивание '_'
 3)Состоит из 10-15 символов
Если все соблюдается, то удалите пробелы в начале и в конце логина, вывод
Иначе сообщите, что не соблюдены требования, запрос заного
s[0].isdigit() == True andand 10 <= len(s) <= 15
'''
'''
s = input('Введите свой логин')
if s[-1].isdigit() == True and '_' in s and 10 <= len(s) <= 15:
    print('супер')
else:
    print('Регайтесь заного!')

'''

'''
На вход подается строка в скобках, например, '(колбаса)' или любая другая строка в скобках.
Количество символов может отличаться, но мы знаем, что скобки всегда будут в начале и в конце строки.
Удалите скобки и выведите на экран получившуюся строку.
'''
'''
s = '(колбаса)'
s = s.replace('(','')
s = s.replace(')','')
print(s)
'''
#--------------------------------------------------------------------------------------------------------------------------
#09.12.2022 - Коллекции - Списки   создается либо [], либо list()
#список   0   1    2     3
"""
number = [10,3123,12,'привет']
print(number[0])
print(number[2])
print(number[3])
print(number[0:2])

number = list(range(0,5))
print(number)
"""
# Можно менять элементы в списке :
'''
zoo = ['Жираф','Конь','Черепаха','Бегемот','Осьминог','Курица']
print(zoo)
zoo[2] = 'Хомяк'
print(zoo)
#или
#Методы из строк также работают, как и со списками
for i in range(len(zoo)):
    zoo[i] = zoo[i].swapcase()
    print(zoo[i])
'''
'''
#Двуменрные списки, они могут хранить и другие списки!
nikita = [5,4,3,3,4,5,5,5]
joe = [5,3,5,4,5,5,5,5]
students = [nikita,joe,[2,3]]
print(students)#выводит список студентов, в котором несколько списков
#Можем обращатся к тому списку, к которому нам нужно
print(students[0])#Обращаемся в список никиты
#Можем узнать элемент индекса из второго списка, который помещен в первый список
print(students[0][2])#Обращаемся к списку никиты, далее уточнаяем, какой элемент нам нужен для этого указываем через ИНДЕКС!
print(students[1][2])
print(f"Никита получил такие оценки {students[0]}")
'''
##                       Кортежи
# кортежи не изменяемые , создаются как круглыми скобками
##marvel = ('spider-man', 'hulk')
##marvel.append('batman') # выдаст ошибку


######print(f"Никита получил такие оценки {students[0]}")
###                           МЕТОДЫЫЫЫЫЫ СПИСКОВВВВВВВВ
'''
### .append() - Метод, который добавляет в список какой-то элемент, добавляет в конец списка
zoo = ['Кот','Собака','Жираф']
zoo.append('Кенгуру') ###Добавляет в конец списка
#animal = input('Добавь животное ')
#zoo.append(animal)
print(zoo)
### .extend() - метод, который добавляет несколько элементов, в конец списка
zoo.extend(['Обезьяна','машина'])
print(zoo)
### .remove - метод, который удаляет элемент по НАЗВАНИЮ!
zoo.remove('Обезьяна')
### .pop() - метод, который удалет ПОСЛЕДНИЙ элемент списка и сохраняет его в переменную если надо
zoo = ['Кот','Собака','Жираф']
last_element = zoo.pop()
print(zoo)
print(last_element)
#ИЛИ  он удаляет элемент по ИНДЕКСУ
zoo.pop(1)
print(zoo) # остается кот
### .clear() - метод, который очищает полностью список!
zoo.clear()
print(zoo)
### .sort - метод, который сортирует значения элементов
h =[12,124,156,1,52,2]
h.sort()
print(h)#По возрастанию
h.sort(reverse=True)
print(h)#По убыванию
al = ['т','а','в','е','г','ш']
al.sort()
print(al)
### .index() - метод, который возвращает индекс ЭЛЕМЕНТА
a = ['Пингвин','Журавль','ЛИгр']
print(a.index('Журавль'))
### .insert()- метод, который добавляет элемент по ИНДЕКСУ
a.insert(1,'ЩРЕК')
print(a)
'''
#Задачки
'''
Создать список лбых чисел, каждый второй элемент заменить на число 0,
посчитать среднее арифметическое число
'''
'''
n = [1,2,3,4,5,6]
for i in range(1,len(n),2): # Если бы поставили 0, то бралось бы с 0, а если с 1, то с единицы
    n[i] = 0
summa = 0
for i in range(0,len(n)):
    summa = summa + n[i]
print(summa/len(n))
'''

'''
1)В этом списке оценок, заменить все оценки джо на 5 при помощи цикла
2)Обращаться только к списку students
'''
'''
joe = [5,3,5,4,5,5,5,5]
students = [nikita,joe,[2,3]]
for i in range(len(joe)):
    joe[i] = 5
print(joe)

for i in range(len(students[1])):
    students[1][i] = 5
print(students[1])
#Или       0-id              1 -id
s = [[5,3,5,4,5,5,5,5],[5,4,3,3,4,5,5,5]]
for i in range(len(s[1])):
    s[1][i] = 5
print(s[1])
'''

'''
Спросить у пользователя 5 чисел, добавить их в список. Затем спросить,
хочет ли он удалить какое-то число из списка, если да, то пусть назовёт,
какое число, он хочет удалить
'''
'''
chisla = []
for i in range(5):
    x = float(input("Введи число: "))
    chisla.append(x)
y = input("Хочешь удалить что нибудь из списка да/нет")
while y == "да":
    z = int(input("Введи название элемента которого хочешь удалить"))
    chisla.remove(z)
    y = input("Хочешь удалить что нибудь из списка да/нет")
else:
    print(chisla)
'''

#--------------------------------------------------------------------------------------------------------------------------
# Повтор прошлой темы! Списки, кортежи, словари, интересные методы
'''
Можем перечислять ИНДЕКСЫ в списке

zoo = ['бегемот','журавль','ящерица']
#1)
for i in zoo:
    print(i)
#или
for i in 'бегемот','журавль','ящерица':
    print(i)
#2) для этого случая надо применить индексирование
for i in range(len(zoo)):
    print(zoo[i])
'''

'''
Можем распоковать список при помощи звездочки, без вывода на следющюю строку
##zoo = ['бегемот','журавль','ящерица']
##print(*zoo)
'''

#---------------------------------------------------------------------------------------------------------------------------------------------
# 13.12.2022

################# СЛОВАРЬЬЬЬЬ
# Это такая коллекция, которая имеет свою уникальность (ключ и значение), создается через фигурные скобки
# Создать словарь можно при помощи {} или dict()
'''сделать номерную книжку
numbers_dict = {"Никита": 89503452343, 'Сестра':7123445523,'Неизвестный номер':1234112221}
print(numbers_dict)
print(numbers_dict['Никита'])#Можем обратиться только к тому, к которому нам нужно обращатся. Чувствителен к регистру
### квадратные скобки - это обращения в словаре, точнее укахываем к какому ключу надо обратиться
'''

''' Так как ключи УНИКАЛЬНЫ, то они не могут повторятся (при повторе, новое значение перезаписывает старое)
numbers_dict = {"Никита": 89503452343, "Никита": 123}
print(numbers_dict)
'''

'''Перезапись элемента, такую штуку можно делать и со списками
number_dict = {'Олеся':'балда'}
number_dict['Олеся'] = 'мышь!' ### квадратные скобки - это обращения в словаре, точнее укахываем к какому ключу надо обратиться
print(number_dict)
'''

'''добавление нового, такую штуку можно делать и со списками
number_dict = {'Олеся':'балда'}
number_dict['Миша'] = 123412412 #В квадратных скобках указываем ключ (создается новый ключ), затем его значение
print(number_dict)
'''

'''Другой способ создания словаря
list_of_work = [['Разработчик Никита', 'Москва'],['Алексей','РЕмонтник']] #обязательно двумерный массив
dict_of_work = dict(list_of_work) # превращает двумерный список в словарь
print(dict_of_work)

a = [['миша','123312']]
b = dict(a)
print(b)
'''
################## Методы в словаре
'''
# dict.pop('') - метод, который удаляет НАЗВАНИЕ[индекс] ключа, также может сохранить ЗНАЧЕНИЕ ключа
# кстати говоря в словаре pop НЕ может удалять последнее значение,а т.е. ключ!
##numbers_dict = {"Никита": 89503452343, 'Сестра':7123445523,'Неизвестный номер':1234112221}
##a = numbers_dict.pop('Неизвестный номер')
##print(f"Удаление неизвестного номера, но сохранение его номера {a}") 
##print(numbers_dict)
'''

'''
#Как скопировать словарь? Его нельзя просто так перезаписать! Иначе меняя новый словарь вы будете менять и страый!
# Правильное копирование !
# dict.copy() - метод, который копирует старый словарь к новому, но не допускает взаимосвязей!(смотреть далее)
numbers_dict = {"Никита": 89503452343, 'Сестра':7123445523,'Неизвестный номер':1234112221}
nub_dict_3 = numbers_dict.copy() # nub_dict_3 копирует у numbers_dict те же значения! При этом не взаимосвязаны
nub_dict_3['Тренер по боксу'] = 1231241
print(numbers_dict)
print(nub_dict_3)

# Неправильное копирование!
numbers_dict = {"Никита": 89503452343, 'Сестра':7123445523,'Неизвестный номер':1234112221}
nub_dict_2 = numbers_dict # nub_dict_2 копирует у numbers_dict те же значение, но они взаимосвязаны!
nub_dict_2['Доставка роолллов'] = 2314124411
print(nub_dict_2)
print(numbers_dict)
#иначе говоря copy в словарях не допускает перезаписи старого словаря
'''

'''
# dict.items() - метод, который вовзращает пару (ключ-значение) в виде кортежей в списке   
numb_dict = {"Никита": 89503452343, 'Сестра':7123445523,'Неизвестный номер':1234112221}
print(numb_dict.items())

# dict.values() - метод, который возвращает только ЗНАЧЕНИЕ ключа
numb_dict = {"Никита": 89503452343, 'Сестра':7123445523,'Неизвестный номер':1234112221}
print(numb_dict.values())

# dict.keys() - метод, который возвращает КЛЮЧ из словаря
numb_dict = {"Никита": 89503452343, 'Сестра':7123445523,'Неизвестный номер':1234112221}
print(numb_dict.keys())

#прикол
for i in numb_dict.items(): ##можно и значение
    print(i)
'''

'''
# dict.update() - метод, который добавляет словарь в словарь, кроме этого заменяет ключ-значение(пару)
a = {'a' : 123, 'b': 2}
a.update({'a':2, 'c':12})
print(a)
'''

'''
# dict.clear() - метод, который очищает словарь
a = {'a' : 123, 'b': 2}
a.clear()
print(a)
'''

################### Интересные методы! для строк и списков
# строка - список
'''
### .split() - метод применяется для СТРОК
# этот метод осматривает строку и так разделяет, как УКАЗАНО в скобках, затем помещяет его в СПИСОК!
zoo = 'опдловап лывла ылав лыв вал л   ылвы'
zoo_list = zoo.split(' ') #Указали в скобках пробел, лишние пробелы он засчитатывает за СИМВОЛЫ 
#zoo_list = zoo.split()    #Выводит без лишних пробелов
print(zoo_list)

zoo = input('Введи животных через запятую ')
zoo_list = zoo.split(' ')
print(zoo_list)


ip = '192.168.1.100'
print(ip.split('.'))

a = 'олвпаоп ола'
a_list = a.split()
print(a_list)
'''
# список - строка
'''
### .join() - применяетя для СПИСКОВ
# метод, который объединяет СПИСОК в СТРОКУ, с таким разделителем, с которым ТЫ хочешь
lang = ['С++','JAVA','PYTHON']
lang_str = ' '.join(lang) # В скобках указываем переменную, которую нужно изменить. Кавычки нужны для того, чтобы
print(lang_str)           #как-то разделить его

lang_str = ','.join(lang)
print(lang_str)
'''

# Задачки
'''
Написать программу, запрашивающую у пользователя на ввод
# # имя и класс(данные вводятся в одну строку через пробел) (Семён 1А) и вывести класс пользователя(Пример: 8A)

info = input('Введите имя и класс ').split(' ')
print(info)
'''

'''
Есть список слов, превратить его в строку

a = ['Хана-монтана','машина','бугатти']
a_str = ' '.join(a)
print(a_str)
'''

'''
Добавить в словарь элемент от пользователя через инпут и сплит.
Чел-ек вводит имя и номер телефона, к примеру. Миша 12314 и вы его добавляете в словарь

x = input('Введите имя и номер телефона через пробел ').split(' ')
x_x = []
x_x.append(x)
dict_x = dict(x_x)
print(dict_x)
'''

'''
# Есть 3 словаря:
# dict_a = {1:10, 2:20}
# dict_b = {3:30, 4:40}
# dict_c = {5:50, 6:60}
# Напишите программу для слияния нескольких словарей в один.

a = {}
dict_a = {1:10, 2:20}
dict_b = {3:30, 4:40}
dict_c = {5:50, 6:60}

for i in dict_a, dict_b, dict_c :
    a.update(i)
print(a)
'''

'''
Доп задача 1 - Дан словарь с числовыми значениями. Необходимо их все перемножить и вывести на экран.

dict_a = {1:10, 2:20, 3:123}
res = 1
for i in dict_a.values():
    res = res * i
print(res)
'''

'''
Даны случайные числа от 0 до 9
создать словарь, где ключи это эти числа, а значения -кол-во чисел в имеющейся
последовательности
например 1234511152
словарь = {1:4,2:2,3:1}

numbers = '123451124568558'
dict_of_numb = {}
for i in range(len(numbers)):
    dict_of_numb[numbers[i]] = numbers.count(numbers[i])
print(dict_of_numb)
'''

''' домашка
Если выписать все натуральные числа меньше 10, кратные 3 или 5, то получим 3,5,6,9
Сумма этих чисел равна 23.
Найти сумму всех чисел меньше 1000, кратных 3 или 5

a = []
for i in range(0,1001):
    if i % 3 == 0 or i % 5 == 0:
        a.append(i)
print(sum(a))
'''

########## КОРТЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖ
# неименяемая коллекиця, которая создается () или tuple()
# кортежи не изменяемые 
# что значит не изменяемый, это значит, что нельзя добалвять, удалять, изменить элемент
'''
y = (1,2,4,5,6,7)
y.append(100) # Хотим добавить элемент, но выдаст ошибку
y.remove(2)   # Хотим удалить по названию, но выдаст ошибку
y[0] = 100    # Хотим добавить в нулевой индекс элемент, но выдаст ошибку
'''
# но ее можно закинуть в список, и там же все изменить
'''
y = (1,2,3,4,5)
x = list(y)
print(x)
'''
'''
marvel = ('spider-man', 'hulk')
marvel.append('batman') # выдаст ошибку
'''
#########-----------------------------------------------------------------------
# 15.12.2022
##################### ФУНННКЦИИИИИИИИИИИ
'''как создать функцию и использовать её
def draw_fig(): # Создается функция и её название
    for i in range(5):
        print('0'*5)
    print('------------')
#Чтобы ее использовать обязательно её нужнр выводить за функцию
draw_fig() #Вызвали функцию ПО ИМЕНИИ
'''

'''минутка объяснении
почему вызываем по имени, а не print
Дело в том, что команда print - это на самом деле функция, т.е. кто-то ее сделал, а мы нею пользуемся, и
каждый раз её ВЫЗЫВАЕМ.
Точно также работает со СВОИМИ функциями, мы их должны вызывать по ИМЕНИ, можно по миллиону раз ее вызывать
-----------------------------------------------
Далее, мы можем задавать параметры нашей функции, это сделать совсем просто
В кргулых скобках задаем переменные, далее её нужно будет упоминать,т.е. записывать значения(аргументы)
'''

#Пример
'''
def draw_fig(x,y): # Создали два параметра(переменных), которые будут за что-то отвечать (Для нашего удобства x - высота, y - ширина) 
    for i in range(x): #Здесь мы создаем ее высоту
        print('0'*y)   #Здесь мы создаем ее ширину
    print('------------')
#Чтобы ее использовать обязательно её нужнр выводить за функцию
draw_fig(2,3) #Обязательно нужно применить АРГУМЕНТЫ! #т.е. 2 - высота, 3 - ширина
'''

#Задачи
'''
Написать функцию, которая принимает стороны прямоугольника и выводит периметр и площадь
'''
'''
def znachenia(a,b):
    s = a*b
    p = 2*(a+b)
    print(s,p)
znachenia(2,5)
'''

'''
Написать функцию,которая принимает целое число минут и преобразует его в сек и выводит на экран

def f(x):
    c = x * 60
    print(c)
f(5)
'''

'''
Создать функцию, принимающую на входе два числа и печатающую на экране сумму этих чисел

def f(x,y):
    print(x+y)
f(15,2)
#
def numbers(a,b):
    print(a+b)
numbers(int(input('ЧИСЛО 1 ')), int(input('ЧИСЛО 2 ')))
'''

'''
Создать функцию, которая принимает два аргумента - исходная цена и скидка
в виде целых чисел. И выводит на экран цену после применения скидки.


def product(price, discount):
    price_with_discount = price - ((discount * price) / 100) # цена со скидкой
    print('со скидкой эта вещь стоит',price_with_discount)
product(int(input('введи цену ')),int(input('введи скидку в процентах ')))
#тут работает в первом аргументе значение PRICE, второй аргумент значение DISCOUNT
'''

'''
Создайте функцию, принимающую на вход список целых чисел и выводящую на экран среднее арифметическое число
'''
##
##def srd(x):
##    for i in range(len(x)):
##        

'''
Создать функцию, принимающую число и выводящую на экран длину этого числа(len использовать нельзя)

def dlina(x):
    c = 0
    for i in x:
        c+=1
    print(c)
dlina(input('введи число '))
#ИЛИИ от учителя
def dlinna(x):
    l = 0
    while x > 0 :
        x = x// 10
        l = l + 1
    print(l,'значное')
dlinna(int(input('Введи число ')))
'''
'''
Создать функцию, которая берет
'''
##------------------------------------------------------------------------------------------
# 18.12.2022
#глобальная переменная - переменная, созданная вне функции и доступная во всей программе
'''
z = 100
def fun():
    global z # команда, которая применять эту переменную и исправляет её
    z = z + 50
    print(z)
fun()
print(z)
'''
#локальеык переменные - переменная, которая создана в функции и доступна только в ней!
'''
def fun2():
    y = 100 # локальная переменная, изменяется только в функции
    print(y)
fun2()
print(y) # Ошибка, потому что локальная переменная Y доступна только внутри функции
'''
#глобальные и локальные переменные с одинаковыми именами
#Надо сказать, что эти две переменные не зависят друг от друга, так как это две различные переменные, несмотря даже, что с одинаковыми именами!
'''
x = 10 # глобал
def func():
    x = 20 # локал
    print(x)
func() #выведит благодаря принту ЛОКАЛЬНУЮ переменную
print(x) # В приоритете будет ГЛОБАЛЬНАЯ переменная
'''

#### оператор return для функции
# return - возвращает значение, позволяет нам использовать его как переменную
# return - завершает функцию , после неё писать нельзя (бессмыслено)
'''
def summa(x,y):
    z = x + y
    return z
# В начале у нас 50 монет
money = 50
# наш игрок заработал еще 200 монет
money = summa(money,200) # money - это аргумент X, 50 - аргумент Y
print(money)
# Еще заработал 50 монет
money = summa(money, 50)
print(money)
'''
'''Если сделать сравнительную аналогию, то можно поначалу увидеть, что функции работают также, но с различиями:
    1) В первом примере НУЖНО применять print
      1.1) Позволяет нам работать в дальнейшем, если к примеру, у человека появится еще 50 монет, то он с сохранившегося значения добавит новое значение
      1.2) Позволяет сохранять переменную в return 
    2) Вовтором примере НЕ нужно применять print, так как просто вызываем функцию
      2.1) Не позволяет нам работать в дальнейшем, если к примеру, у человека появились еще 50 монет, выдаст ошибку
      2.2.) ------
'''
'''
def summa(x,y):
    z = x + y
    return z
# В начале у нас 50 монет
money = 50
money = summa(money,200) # money - это аргумент X, 50 - аргумент Y
print(money)
money = summa(money,50)
print(money)

def summa(x,y):
    z = x + y
    print(z)
money = 50
money = summa(money,200)
money = summa(money,50) 
'''
'''
def calc(x,y):
    summa = x + y
    rez = x - y
    return summa,rez
print(calc(10,20)) ##Выведит кортеж
a,b = calc(10,20) #Присовет значения соотвественно
print(a) #Вывод 10
print(b) #Вывод 20
'''

'''
def pogoda(weather):
    if weather == 'холодно':
        return 'Надень шапку'
    elif weather == 'тепло' :
        return 'Не надевай шапку No'

x = input('Какая сейчас погода? Холодно или тепло?')
print(pogoda(x))
'''
# Задачка
'''
НАписать программу, которая принимает от пользователя ГОД и возвращает высокосный год или нет
Высокосный год - год, который кратен 4, но не кратен 100 или кратен 400

def god(x):
    if (x % 4 == 0 and x % 100 != 0) or x % 400 == 0:
        return "Высокосный год"
    else:
        return "Невысокосный год"
x = int(input('Введи год '))
print(god(x))
'''

'''
Создать функцию, которая берет словарь объектов {'name': 'Sam','Grade':[3,5,4]}
и возвращает словарь таких объектов, как {'name':'Sam', 'top_grade': 5}

sometging_dict = {'name': 'Sam','grade':[3,5,4]}
def do_top_grade(dict):
    last_elem = dict.pop('grade')
    print(f"Значние от удаленного ключа {last_elem}")
    max_elem = max(last_elem)
    print(f"МАКС в значение от удаленного ключа {max_elem}")
    dict['top_grade'] = max_elem
    print(dict)
do_top_grade(sometging_dict)
'''
'''
Создать функцию, которая принимает в качестве аргумента список, состоящий из чисел
верните список, в котором будут удалены все нечетные числа.
пример [1,2,42,51]
возвращаемое значение [2,42]

a = [1,2,42,23]
new_list = []
def f():
    for i in range(len(a)):
        if a[i] % 2 == 0:
            return new_list.append(a[i])
f()
print(new_list)
'''
#### Лямбда 
## лямбда  - такая функция, которая позваляет писать в одну строку
# не нужно писать def
# не нужно писать return
#пока так
'''
def summa(x,y):
    return x+y

print(summa(10,20))

# lambda - в одну строчку
summa = lambda x,y:x+y
print(summa(10,20))
'''
#------------------------------------------------------------------------
# 20.12.2022 - Работа с файлами
'''
Смотри на папку статьи там есть файл с информацией, а здесь запишу
некоторые особенности 
'''
'''
Существует библиотека os - операционная система, с которой удобно пользоваться с файлами
С нею удобно пользоваться с файлами:
    1)Создавать файлы
    2)Переименовывать файлы
    3)Удалять файлы
    4)Перемещать файлы
    и т.д.
'''
'''
Существует метод rename - команда, которая переименовывает файл
'''
##import os #
##os.rename('Записи.txt','New_Записки.txt') #меняет название файла
# Попробуй запустить и смотреть в папку!
'''
Метод system() позволяет октрывать различные приложения, файлы, аудио, браузер и т.д.
Главное, чтобы открывался этот файл, нужно указывать полный путь, либо же создать общую папку с Питоном и с тем приложением, с которым вы хотите его открыть
'''
##import os
##os.system('Записи.txt') #Открываеть блокнот!
'''
при помощи команды mkdir - создает папку, только нужно пользоваться system
'''
##import os
##os.system('mkdir papka') #Создает папку при помощи команды mkdir

#Задачки
'''
С помощью лайтона создать файл exeple3.txt и создать туда несколько строк
НАписать функцию, которая принимает у пользователя имя файла exeple3.txt
Функция должна вернуть первую строку записанную в данный файл, а после переименовать его в exeple4.txt

import os
name = 'new-file.txt' # Нужно было создать файл
with open(name,'w') as file:
    for i in range(1,4):
        file.write(f"{i} строка \n") # Добавляет несколько строк и используется вместе с циклом

def first_line(name_of_file):
    with open(name_of_file, 'r') as file:
        file_first_line = file.readlines()[0] # Читать полностью, но с индексам Получается только первую строку
    os.rename(name,'exemple4.txt')

print(first_line(name))
'''
'''
    Добавить элементы словаря в текстовый файл

dict = {'Никита':'1231234', 'Ром':'12312412'}
with open('dict.txt','w') as file:
    keys_values = dict.items() #items - пара

    for i,k in keys_values:
        elem = i + ':' + k + '\n'
        file.write(elem)
        ##Для начала нужно создать файл!
'''
'''
Получить список строк из файла и изменить список, убрав оттуда все символы '\n'
вспомнить тему строки
.join()

Надо было методом перебора сделать replace, т.к. он не работает в списках, поэтому перебором, см.ниже

with open('Записки.txt','r') as file:
    x = file.readlines()
    for i in range(len(x)):
        x[i] = x[i].replace('\n','',1)
print(x)
'''
'''

СМОТРИ JSON  В ДРУГОМ ФАЙЛЕ!!!!!!!!

'''

'''

СМОТРИ CSV В ДРУГОМ ФАЙЛЕ!!!!!!!!!!!!!!!!!!

'''
#Домашка
'''
Написать программу - список дел. Нужно спросить у пользователя, скольких дел ты хочешь добавить?
Допустим, он ответил 5
Вы 5 раз должны спросить "введи дело" и сохранить в список
Затем Вы создаете текстовый файл и добавляете туда эти дела, но не все, а пропускаете каждое второе слова,
т.е. добавляете в файл только 1,3 и 5 дело в ОДНУ СТРОКУ

#проснуться
#улыбнуться
#покушать
#посмотреть сериал
#поспать

#проснутьсяпокушатьпоспать

a = int(input('Сколько дел ты хочешь ввести?'))
l = []
for i in range(a):
    task = input()
    l.append(task)

with open('dz.txt', 'w') as file:
    for i in range(0,a,2):
        file.write(l[i])
'''
#-----------------------------------------------------------------------------------------------------------------------------
#                                   Классы 26,12,2022


# Задачки
'''
Создать любой класс и переменные
'''
##class Transport:
##    def __init__(self, name):
##        self.name = name
##        print(f"{self.name} крутая машина")
##
##car = Transport('Супра')

'''
Создать класс Ученик, добавить ему логичные переменные (оценки и тд)
'''
##class Student:
##    def __init__(self, name, stars,lesson):
##        self.name = name
##        self.stars = stars
##        self.lesson = lesson
##
##    def say_student(self):
##        print(f"Привет! Меня зовут {self.name}, у меня такие вот оценки {self.stars}")
##
##    def show_my_stars(self):
##        for i in self.stars:
##            print(i)
##            
##    def show(self):
##        for i in range(len(self.stars)):
##            print(self.stars[i],self.lesson[i])
##            
###Создаем экземпляр и присваиваем ему аргументы, незабывая написать Родительский класс
##st1 = Student('Ваня', [2,4,5,5,2],['математика','русский язык','биология','физика','астрономия'])
##st1.say_student()   # Вызовет функцию
##st1.show_my_stars() # Вызовет функцию
##st1.show()          # Вызовет фунцкию
##print(st1.name)     # Вывод имени
##print(st1.stars)    # Вывод оценки в виде списка

##
##class Student:
##    def __init__(self,clas,marks,subjects):
##        self.clas = clas
##        self.marks = marks
##        self.subjects = subjects
##    type = "Сдают экзамены"
##maxim = Student("9A", "5,5,5,4,5", "Информатика,Физика")
##print(maxim.type,maxim.clas,maxim.marks,maxim.subjects)
##print("Спасите Макса")
##vadim = Student("11A", "2,5,4,3,3", "Информатика,Физика")
##print(vadim.type,vadim.clas,vadim.marks,vadim.subjects)
##print("И Вадима тоже спасите :D")

#------------------------------------------------------------------------------------------------------------------------------------------------------------
#                       30.12.12
'''
class Student:
    def __init__(self, name):
        self.name = name
    #Вывод имени 
    def __str__(self):
        return f"{self.name} / Это обхект класса Studetn. У него есть имя и возраст. Имя объекта : {self.name}"

    def eat(self):
        print(f"я люблю покущать, меня зовут {self.name}")
        
kot_boris = Student('Кот борис')
print(kot_boris)# будет выводить имя обьекта - стр "Кот борис" )
'''

##########См ниже - родительский класс и дочерний класс

'''
class Animal:
    def __init__(self, name,age):
        self.name = name
        self.age = age
        print(f"ПРивет я {self.name}")

class Dog(Animal):
    def __init__(self, name, age, food):
        super().__init__(name,age) #Супер.()инит - вызывает здесь родительский класс через супер().инит
        self.food = food #Собвстенное у класса Dog
    def bark(self): #Собственный метод у класса Dog
        print(f"Гав гав гав ({self.name})")

sobaka = Dog('Шарк',10,'Курица')
print(sobaka.food)
'''

#Множественное наследование

'''
Грубо говоря все наследуется от родительского класса Dog, а он в свою очередь наследуется от класса Animal

class Animal:
    def __init__(self, name,age):
        self.name = name
        self.age = age
        print(f"ПРивет я {self.name}")

class Dog(Animal):
    def __init__(self, name, age, food):
        super().__init__(name,age) #Супер.()инит - вызывает здесь родительский класс через супер().инит
        self.food = food #Собвстенное у класса Dog

    def foood(self):
        print(f"Я люблю покушать {self.food}")

    def bark(self): #Собственный метод у класса Dog
        print(f"Гав гав гав ({self.name})")

class Spitz(Dog,Animal):
    def __init__(self, name, age, food, fun):
        super().__init__(name,age,food)
        self.fun = fun
        
    def __str__(self): 
        return f"Я тот самый {self.name}" # При print(boris), вывод будет этого текста из return

    def funn(self):
        print(f"Я Шпиц и я очень {self.fun}")

boris = Spitz('Борис', 1, 'Колбасy', 'очень весёлый')
boris.funn()
boris.bark()
boris.foood()
print(boris)
'''

##Задачки
'''
Добавить свое

class Animal:
    def __init__(self, name,age):
        self.name = name
        self.age = age
        print(f"ПРивет я {self.name}")

    def __str__(self):
        return f"Это объект класса Animal. У него есть имя и возраст. Имя объекта: {self.name}"

    def eat(self):
        print(f"Я люблю покушац, меня зовут {self.name}")

class Dog(Animal):
    def __init__(self, name, age, food):
        super().__init__(name,age) #Супер.()инит - вызывает здесь родительский класс через супер().инит
        self.food = food #Собвстенное у класса Dog

    def bark(self): #Собственный метод у класса Dog, обязательно self
        print(f"Гав гав гав ({self.name})")

class Cat(Animal):
    def __init__(self, name, age, food):
        super().__init__(name, age)
        self.food = food

    def say_cat(self):
       print(f"Я люблю покушать {self.food}") # Обязательно print

sobaka = Dog('Шарк',10,'Курица') #Привет я Шарк - это благодаря принту в классе Animal
sobaka.bark() # гав гав гав(шарк)
print(sobaka.food) #Курица
print()
mister_cat = Cat('Райен Гослинг', 52, 'Курочка Ряба')
mister_cat.say_cat()
'''

'''
Реализовать родительский класс человека, а также дочерние классы директора, преподавателя и ученика.
Описать для каждого класса необходимые свойства и методы
Важно:
Директор помимо своих обязанностей может также и преподавать(множественное наследование)
'''
class People:
    def __init__(self, name):
        self.name = name

    def say_people(self):
        print(f"Привет я {self.name}")

class Student(People):
    def __init__(self, name, height, activity):
        super().__init__(name)
        self.activity = activity

    def say_activity(self):
        print(f"Привет я {self.name}, Я люблю заниматься {self.activity}")

class Teacher(People):
    def __init__(self, name, lesson):
        super().__init__(name)
        self.lesson = lesson

    def say_lesson(self):
        print(f"Здравствуйте Я {self.name}, Я препадаю урок {self.lesson}")

class Director(Teacher, People):
    def __init__(self, name, work, lesson):
        super().__init__(name, lesson)
        self.work = work   
        self.lesson = lesson # У него по факту будет свой урок, вот, поэтому нужно создать новую переменную !
        
    def say_work(self):
        print(f"Здравствуйте Я {self.name} - {self.work} этой школы, а также препадаватель {self.lesson}")

stud = Student('Никита', 179, 'Баскетбол')
stud.say_activity()
print()

teach = Teacher('Марина Иванова', 'Математика')
teach.say_lesson()
print()

direct = Director('Петр Иванович', 'Директор', 'Русский язык')
direct.say_work()

#------------------------------------------------------------------------------------------------
#           10.01.2023
